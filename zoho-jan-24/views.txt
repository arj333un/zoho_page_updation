def detail(request,id):
    company=company_details.objects.get(user=request.user)
    user_id=request.user
    items=AddItem.objects.all()
    product=AddItem.objects.get(id=id)
    history=History.objects.filter(p_id=product.id)
    comments = Comments_item.objects.filter(item=id).order_by('-id')
    print(product.id)
    
    
    estimate = EstimateItems.objects.filter(item_name = product.Name)
    sales_order = sales_item.objects.filter(product = product.Name)
    recurring_invoice = recur_itemtable.objects.filter(iname = product.Name)
    purchase_order = Purchase_Order_items.objects.filter(item = product.Name)
    recurring_bills = recurring_bills_items.objects.filter(item = product.Name)
    invoice = invoice_item.objects.filter(product = product.Name)
    deliveryChellan = ChallanItems.objects.filter(item_name = product.Name)
    bills = PurchaseBillItems.objects.filter(item_name = product.Name)
    expense = Expense.objects.filter(goods_label = product.Name)
    
    quantity = int(product.stock)
    price = int(product.p_price)
    stock = (quantity * price)
    #svalue= (product.p_price * stock)
    
    
    
    context={
       "allproduct":items,
       "product":product,
       "history":history,
       'company':  company, 
       "comments":comments,
       'stock': stock,
        'estimate': estimate,
        'sales_order': sales_order,
        'recurring_invoice': recurring_invoice,
        'purchase_order': purchase_order,
        'recurring_bills': recurring_bills,
        'invoice': invoice,
        'deliveryChellan': deliveryChellan,
        'bills': bills,
        'expense': expense,
        'stock': stock,
        #'svalue' : svalue,
    }
    
    

    
  
    
    return render(request,'demo.html',context)



def sharePricelistToEmail(request,id):
    if request.user:
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)

                cmp = company_details.objects.get( user = request.user.id)
                bill = Pricelist.objects.get(id = id)
                items = AddItem.objects.get(id = id)
                        
                context = {'bill': bill, 'cmp': cmp,'items':items}
                template_path = 'item_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)#, link_callback=fetch_resources)
                pdf = result.getvalue()
                filename = f'Item - {items.Name}.pdf'
                subject = f"Item - {items.Name}"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Items  - Bill-{items.hsn}. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact_number}", from_email=settings.EMAIL_HOST_USER,to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                msg = messages.success(request, 'Bill has been shared via email successfully..!')
                return redirect(detail,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(detail, id)
